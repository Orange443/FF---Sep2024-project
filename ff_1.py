# -*- coding: utf-8 -*-
"""FF_1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19OHK89SV-Nz0CzWKO60j6AFGqasaCHl8
"""

import pandas as pd

# Read the CSV files into Pandas DataFrames
annual_pl_1 = pd.read_csv("Copy of Annual_P_L_1.csv")
annual_pl_1_t2 = pd.read_csv("Annual_P_L_1_T2.csv")
cash_flow_statments = pd.read_csv("Copy of cash_flow_statments.csv")
cash_flow_statements_t2 = pd.read_csv("cash_flow_statements_T2.csv")
ratios_1 = pd.read_csv("Copy of ratios_1.csv")
ratios_1_t2 = pd.read_csv("ratios_1_T2.csv")
other_metrics = pd.read_csv("Copy of other_metrics.csv")
other_metrics_t2 = pd.read_csv("Other_metrics_T2.csv")

# Drop rows with null values in `Sales` and `Profit after tax` columns for `annual_pl_1`, `annual_pl_1_t2`, `cash_flow_statments` and `cash_flow_statements_t2`
annual_pl_1.dropna(subset=["Sales", "Profit after tax"], inplace=True)
annual_pl_1_t2.dropna(subset=["Sales", "Profit after tax"], inplace=True)
cash_flow_statments.dropna(subset=["Free cash flow last year"], inplace=True)
cash_flow_statements_t2.dropna(subset=["Free cash flow last year"], inplace=True)

# Rename `Sales` and `Profit after tax` columns to `Sales (T1)` and `Profit after tax (T1)` respectively for `annual_pl_1`
annual_pl_1.rename(
    columns={"Sales": "Sales (T1)", "Profit after tax": "Profit after tax (T1)"},
    inplace=True,
)

# Rename `Sales` and `Profit after tax` columns to `Sales (T2)` and `Profit after tax (T2)` respectively for `annual_pl_1_t2`
annual_pl_1_t2.rename(
    columns={"Sales": "Sales (T2)", "Profit after tax": "Profit after tax (T2)"},
    inplace=True,
)

# Rename `Free cash flow last year` column to `Free cash flow last year (T1)` for `cash_flow_statments`
cash_flow_statments.rename(
    columns={"Free cash flow last year": "Free cash flow last year (T1)"}, inplace=True
)

# Rename `Free cash flow last year` column to `Free cash flow last year (T2)` for `cash_flow_statements_t2`
cash_flow_statements_t2.rename(
    columns={"Free cash flow last year": "Free cash flow last year (T2)"}, inplace=True
)

def calculate_dcf_value(company_name):
    """
    Calculate the DCF value of a company.

    Parameters:
    - company_name: Name of the company

    Returns:
    - Float: DCF value of the company
    """

    # Extract the relevant financial data for the given `company_name` from the respective dataframes
    company_data_annual_pl_1 = annual_pl_1[annual_pl_1["Name"] == company_name]
    company_data_annual_pl_1_t2 = annual_pl_1_t2[annual_pl_1_t2["Name"] == company_name]
    company_data_cash_flow_statements = cash_flow_statments[cash_flow_statments["Name"] == company_name]
    company_data_cash_flow_statements_t2 = cash_flow_statements_t2[cash_flow_statements_t2["Name"] == company_name]
    company_data_ratios_1 = ratios_1[ratios_1["Name"] == company_name]
    company_data_other_metrics = other_metrics[other_metrics["Name"] == company_name]

    if company_data_annual_pl_1.empty or company_data_annual_pl_1_t2.empty or company_data_cash_flow_statements.empty or company_data_cash_flow_statements_t2.empty or company_data_ratios_1.empty or company_data_other_metrics.empty:
        return float('nan')
    # Fill null values in `company_data` with zeroes
    company_data_annual_pl_1 = company_data_annual_pl_1.fillna(0)
    company_data_annual_pl_1_t2 = company_data_annual_pl_1_t2.fillna(0)
    company_data_cash_flow_statements = company_data_cash_flow_statements.fillna(0)
    company_data_cash_flow_statements_t2 = company_data_cash_flow_statements_t2.fillna(0)
    company_data_ratios_1 = company_data_ratios_1.fillna(0)
    company_data_other_metrics = company_data_other_metrics.fillna(0)

    # Calculate revenue growth
    revenue_growth = (
        (company_data_annual_pl_1_t2["Sales (T2)"].iloc[0] - company_data_annual_pl_1["Sales (T1)"].iloc[0])
        / company_data_annual_pl_1["Sales (T1)"].iloc[0]
    ) * 100

    # Calculate average operating margin
    average_operating_margin = (
        company_data_annual_pl_1["OPM"].iloc[0] + company_data_annual_pl_1["OPM last year"].iloc[0]
    ) / 2

    # Calculate average tax rate
    average_tax_rate = (
        company_data_annual_pl_1["Tax"].iloc[0] + company_data_annual_pl_1["Tax last year"].iloc[0]
    ) / 2

    # Calculate average net working capital
    average_net_working_capital = (
        (
            company_data_other_metrics["Working Capital to Sales ratio"].iloc[0]
            * company_data_annual_pl_1["Sales (T1)"].iloc[0]
        )
        + (
            company_data_other_metrics["Working Capital to Sales ratio"].iloc[0]
            * company_data_annual_pl_1["Sales last year"].iloc[0]
        )
    ) / 2

    # Calculate change in net working capital
    change_in_net_working_capital = (
        company_data_other_metrics["Working Capital to Sales ratio"].iloc[0]
        * company_data_annual_pl_1["Sales (T1)"].iloc[0]
    ) - (
        company_data_other_metrics["Working Capital to Sales ratio"].iloc[0]
        * company_data_annual_pl_1["Sales last year"].iloc[0]
    )

    # Calculate free cash flow
    free_cash_flow = []

    free_cash_flow.append(company_data_cash_flow_statements["Free cash flow last year (T1)"].iloc[0])
    free_cash_flow.append(company_data_cash_flow_statements_t2["Free cash flow last year (T2)"].iloc[0])

    for i in range(3):
        free_cash_flow.append(
            (
                free_cash_flow[-1]
                * (1 + revenue_growth)
                * (1 + (average_operating_margin / 100))
                * (1 - (average_tax_rate / 100))
            )
            - change_in_net_working_capital
        )

    # Calculate Weighted Average Cost of Capital (WACC)
    wacc = (
        (
            (
                company_data_annual_pl_1["Return on capital employed"].iloc[0]
                + company_data_annual_pl_1["Return on capital employed"].iloc[0]
            )
            / 2
        )
        * (
            1
            - (
                (
                    company_data_ratios_1["Debt to equity"].iloc[0]
                    + company_data_ratios_1["Debt to equity"].iloc[0]
                )
                / 2
            )
        )
    ) / company_data_other_metrics["Current Price"].iloc[0]

    # Calculate present value of future free cash flows and terminal value
    terminal_growth_rate = 0.02

    present_value_of_future_free_cash_flows = 0

    for i, fcf in enumerate(free_cash_flow):
        present_value_of_future_free_cash_flows += fcf / ((1 + wacc) ** (i + 1))

    terminal_value = (
        free_cash_flow[-1]
        * (1 + terminal_growth_rate)
        / ((1 + wacc) ** (len(free_cash_flow)))
    )

    # Calculate DCF value of the company
    dcf_value = present_value_of_future_free_cash_flows + terminal_value

    # Return the calculated DCF value
    return dcf_value.mean()

# Call the `calculate_dcf_value` function for "Marble City" and print the result

company_name = "Authum Invest"
dcf_value = calculate_dcf_value(company_name)

# Print the result
print(f"The DCF value for {company_name} is {dcf_value:.2f}")
# Extract the `Market Capitalization` for "Marble City" from the `other_metrics` and `other_metrics_t2` datasets
market_cap_t1 = other_metrics[other_metrics["Name"] == company_name]["Market Capitalization"].iloc[0]
market_cap_t2 = other_metrics_t2[other_metrics_t2["Name"] == company_name]["Market Capitalization"].iloc[0]

# Calculate the average `Market Capitalization`
average_market_cap = (market_cap_t1 + market_cap_t2) / 2

# Compare DCF value with market capitalization
if dcf_value > average_market_cap * 1.5:
    print(f"The company {company_name} may be undervalued and potentially a good investment.")
else:
    print(f"The company {company_name} may not be a good investment.")

investable_companies = []
for company_name in annual_pl_1["Name"].unique():

    # Call the `calculate_dcf_value` function for the current company
    dcf_value = calculate_dcf_value(company_name)

    # Extract the `Market Capitalization` for the current company from the `other_metrics` and `other_metrics_t2` datasets
    market_cap_t1 = other_metrics[other_metrics["Name"] == company_name]["Market Capitalization"].values
    market_cap_t2 = other_metrics_t2[other_metrics_t2["Name"] == company_name]["Market Capitalization"].values

    # Check if market_cap_t1 and market_cap_t2 are not empty
    if len(market_cap_t1) > 0 and len(market_cap_t2) > 0:
        market_cap_t1 = market_cap_t1[0]
        market_cap_t2 = market_cap_t2[0]

        # Calculate the average `Market Capitalization`
        average_market_cap = (market_cap_t1 + market_cap_t2) / 2

        # Compare DCF value with market capitalization
        if dcf_value > average_market_cap * 1.5:
            print(f"The DCF value for {company_name} is {dcf_value:.2f} and it's a potentially good investment.")
            investable_companies.append(company_name)
        else:
            print(f"The DCF value for {company_name} is {dcf_value:.2f} and it's not a good investment.")
    else:
        print(f"Market Capitalization data not found for {company_name} in one or both datasets.")

print(f"Number of investable companies: {len(investable_companies)}")

investable_companies_df = pd.DataFrame({"Name": investable_companies})

# Merge `investable_companies_df` with `price_T1` and `price_T2` on the `Name` column
investable_companies_price_change = pd.merge(
    investable_companies_df,
    annual_pl_1[["Name", "Current Price"]],
    on="Name",
    how="inner",
)

# Merge with other_metrics_t2 to get 'Market Capitalization'
investable_companies_price_change = pd.merge(
    investable_companies_price_change,
    annual_pl_1_t2[["Name", "Current Price"]], # Remove 'Market Capitalization' here
    on="Name",
    how="inner",
    suffixes=('_T1', '_T2') # Add suffixes to differentiate between T1 and T2 prices
)

# Merge again to add 'Market Capitalization' from other_metrics_t2
investable_companies_price_change = pd.merge(
    investable_companies_price_change,
    other_metrics_t2[["Name", "Market Capitalization"]], # Get 'Market Capitalization' from here
    on="Name",
    how="inner",
)


# Calculate the percentage change in price for each stock from T1 to T2
investable_companies_price_change["Price Change (%)"] = (
    (
        investable_companies_price_change["Current Price_T2"] # Use the correct column name for T2 price
        - investable_companies_price_change["Current Price_T1"] # Use the correct column name for T1 price
    )
    / investable_companies_price_change["Current Price_T1"]
) * 100

# Sort the merged dataframe in descending order based on `Price Change (%)`
investable_companies_price_change.sort_values(
    by="Price Change (%)", ascending=False, inplace=True
)

# Filter the merged dataframe for rows where `Price Change (%)` is greater than 0
investable_companies_price_change = investable_companies_price_change[
    investable_companies_price_change["Price Change (%)"] > 0
]

# Print the column name and their data types
print(investable_companies_price_change.head())

# Step 2: Define the function to categorize market capitalization
def categorize_market_cap(market_cap):
    if 0 <= market_cap < 10000:
        return 'Small Cap'
    elif 10000 <= market_cap < 25000:
        return 'Mid Cap'
    elif market_cap >= 25000:
        return 'Large Cap'
    else:
        return 'Unknown'

# Step 3: Apply the function to create a new column 'Market Cap Category'
investable_companies_price_change["Market Cap Category"] = investable_companies_price_change["Market Capitalization"].apply(categorize_market_cap)

# Step 4: Print the updated DataFrame
investable_companies_price_change

print(f"Number of investable companies: {len(investable_companies_price_change)}")

investable_companies_price_change.to_csv('investable_companies_price_change.csv', index=False)